#+TITLE: Emacs Config
* Custom
  #+BEGIN_SRC emacs-lisp
    (setq custom-file "~/.emacs.d/custom.el")
    (load custom-file)
  #+END_SRC
* Load package and add repos
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
    (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
    (setq package-enable-at-startup nil)
    (package-initialize)
  #+END_SRC
* Have use-package automatically install packages
** Install use-package
   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (eval-when-compile
       (require 'use-package))
   #+END_SRC
** Package List
*** Always load
    #+BEGIN_SRC emacs-lisp
       (setq use-package-always-ensure t)
    #+END_SRC
*** auto-complete
    #+BEGIN_SRC emacs-lisp
      (use-package auto-complete
	:init
	(ac-config-default))
    #+END_SRC
*** base16-theme
    #+BEGIN_SRC emacs-lisp
      (use-package base16-theme)
    #+END_SRC
*** diminish
    #+BEGIN_SRC emacs-lisp
      (use-package diminish
        :init
        (diminish 'jiggle-mode))
    #+END_SRC
*** evil
    #+BEGIN_SRC emacs-lisp
      (use-package evil
        :init
        ;; Scroll up with C-u
        (setq evil-want-C-u-scroll t)
        :config
        ;; move by visual line
        (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
        (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
        (use-package evil-leader
          :init
          (global-evil-leader-mode))
        (use-package evil-numbers
          :init
          (global-set-key (kbd "C-c C-=") 'evil-numbers/inc-at-pt)
          (global-set-key (kbd "C-c C--") 'evil-numbers/dec-at-pt))
        (use-package evil-org))
    #+END_SRC
*** flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
        :init
        (add-hook 'after-init-hook #'global-flycheck-mode))
    #+END_SRC
*** helm
    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :init
        (helm-mode 1)
        (global-set-key (kbd "M-x") 'helm-M-x))
    #+END_SRC
*** jdee
    #+BEGIN_SRC emacs-lisp
      (use-package jdee
        :disabled t)
    #+END_SRC
*** magit
    #+BEGIN_SRC emacs-lisp
      (use-package magit
        :config
        (defadvice magit-status (around magit-fullscreen activate)
          (window-configuration-to-register :magit-fullscreen)
          ad-do-it
          (delete-other-windows))

        (defun magit-quit-session ()
          "Restores the previous window configuration and kills the magit buffer"
          (interactive)
          (kill-buffer)
          (jump-to-register :magit-fullscreen))

        (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
    #+END_SRC
*** org-bullets
    #+BEGIN_SRC emacs-lisp
      (use-package org-bullets
        :init
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
        (setq org-bullets-bullet-list '("•")))
    #+END_SRC
*** powerline
    #+BEGIN_SRC emacs-lisp
      (use-package powerline
        :disabled t
        :config
        (use-package airline-themes))
    #+END_SRC
*** powerline-evil
    #+BEGIN_SRC emacs-lisp
      (use-package powerline-evil
        :disabled
        :init
        (powerline-evil-vim-color-theme))
    #+END_SRC
*** rainbow-delimiters
    #+BEGIN_SRC emacs-lisp
      (use-package rainbow-delimiters
        :init
        (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
    #+END_SRC
*** s
    #+BEGIN_SRC emacs-lisp
      (use-package s)
    #+END_SRC
*** yasnippet
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet)
    #+END_SRC
* UI
** Cursor colour
   #+BEGIN_SRC emacs-lisp
     (set-cursor-color "#c0c5ce")
   #+END_SRC
** Font
   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil :font "Source Code Pro 10")
   #+END_SRC
** Highlight current line
   #+BEGIN_SRC emacs-lisp
     (global-hl-line-mode 1)
   #+END_SRC
** Modeline
   https://emacs-fu.blogspot.ca/2011/08/customizing-mode-line.html
   #+BEGIN_SRC emacs-lisp
     ;; use setq-default to set it for /all/ modes
     (setq-default mode-line-format
                   (list
                    " "
                    ;; was this buffer modified since the last save?
                    '(:eval (when (buffer-modified-p)
                              (concat (propertize "Modified"
                                          'face 'font-lock-warning-face
                                          'help-echo "Buffer has been modified") " ")))

                    ;; is this buffer read-only?
                    '(:eval (when buffer-read-only
                              (concat (propertize "Read Only"
                                          'face 'font-lock-type-face
                                          'help-echo "Buffer is read-only") " ")))

                    ;; the buffer name; the file name as a tool tip
                    '(:eval (propertize "%b " 'face 'font-lock-keyword-face
                                        'help-echo (buffer-file-name)))

                    ;; line and column
                    "(" ;; '%02' to set to 2 chars at least; prevents flickering
                    (propertize "%02l" 'face 'font-lock-type-face) ","
                    (propertize "%02c" 'face 'font-lock-type-face)
                    ") "

                    ;; the current major mode for the buffer.
                    "["
                    '(:eval (propertize "%m" 'face 'font-lock-string-face
                                        'help-echo buffer-file-coding-system))
                    "] "

                    ;; add the time, with the date and the emacs uptime in the tooltip
                    '(:eval (propertize (format-time-string "%I:%M%P")
                                        'help-echo
                                        (concat (format-time-string "%c; ")
                                                (emacs-uptime "Uptime:%hh"))))
                    ;; i don't want to see minor-modes; but if you want, uncomment this:
                    ;; minor-mode-alist  ;; list of minor modes
                    ))
   #+END_SRC
** No welcome screen
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-splash-screen t)
     (setq inhibit-startup-message t)
   #+END_SRC
* Org
** Add timestamps when DONE
   #+BEGIN_SRC emacs-lisp
     (setq org-log-done 'time)
   #+END_SRC
** Agenda
   #+BEGIN_SRC emacs-lisp
     (setq org-agenda-files '("~/Dropbox/"))
   #+END_SRC
** Ellipsis
   #+BEGIN_SRC emacs-lisp
     (setq org-ellipsis " ⤵")
   #+END_SRC
** Source block languages
   #+BEGIN_SRC emacs-lisp
     (setq org-src-fontify-natively t)
     (org-babel-do-load-languages
      'org-babel-load-languages '((css . t)
				  (emacs-lisp . t)
				  (java . t)
				  (js . t)
				  (latex . t)
				  (lisp . t)
				  (org . t)
				  (perl . t)
				  (python . t)
				  (ruby . t)
				  (sh . t)))
   #+END_SRC
** TODO States
   #+BEGIN_SRC emacs-lisp
     (setq org-todo-keywords
           '((sequence "[ ](t)" "[-](i)" "[*](w)" "|" "[X](d)")
             (sequence "TODO(T)" "IN-PROGRESS(I)" "WAITING(W)" "|" "DONE(D)" "CANCELED(C)")))
   #+END_SRC
* Other
** Easy quick edits
   #+BEGIN_SRC emacs-lisp
     (server-start)
   #+END_SRC
** Go to last change
   #+BEGIN_SRC emacs-lisp
     (global-set-key [(control meta .)] 'goto-last-change)
   #+END_SRC
** Move *~ files
   #+BEGIN_SRC emacs-lisp
     ;; Write backup files to own directory
     (setq backup-directory-alist
	   `(("." . ,(expand-file-name
		      (concat user-emacs-directory "backups")))))

     ;; Make backups of files, even when they're in version control
     (setq vc-make-backup-files t)
   #+END_SRC
** Scroll a line at a time
   #+BEGIN_SRC emacs-lisp
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
     (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
     (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
     (setq scroll-step 1) ;; keyboard scroll one line at a time
   #+END_SRC
** Open window at the side
   #+BEGIN_SRC emacs-lisp
     (defun lia/window-switch-split ()
       "Switch between horizontal/vertical layout"
       (interactive)
       (if (= (count-windows) 2)
	   (let* ((this-win-buffer (window-buffer))
		  (next-win-buffer (window-buffer (next-window)))
		  (this-win-edges (window-edges (selected-window)))
		  (next-win-edges (window-edges (next-window)))
		  (this-win-2nd (not (and (<= (car this-win-edges)
					      (car next-win-edges))
					  (<= (cadr this-win-edges)
					      (cadr next-win-edges)))))
		  (splitter
		   (if (= (car this-win-edges)
			  (car (window-edges (next-window))))
		       'split-window-horizontally
		     'split-window-vertically)))
	     (delete-other-windows)
	     (let ((first-win (selected-window)))
	       (funcall splitter)
	       (if this-win-2nd (other-window 1))
	       (set-window-buffer (selected-window) this-win-buffer)
	       (set-window-buffer (next-window) next-win-buffer)
	       (select-window first-win)
	       (if this-win-2nd (other-window 1))))))
   #+END_SRC
** Rotate windows
   #+BEGIN_SRC emacs-lisp
     (defun lia/window-rotate ()
       "Rotate your windows"
       (interactive)
       (cond ((not (> (count-windows)1))
	      (message "You can't rotate a single window!"))
	     (t
	      (setq i 1)
	      (setq numWindows (count-windows))
	      (while  (< i numWindows)
		(let* (
		       (w1 (elt (window-list) i))
		       (w2 (elt (window-list) (+ (% i numWindows) 1)))

		       (b1 (window-buffer w1))
		       (b2 (window-buffer w2))

		       (s1 (window-start w1))
		       (s2 (window-start w2))
		       )
		  (set-window-buffer w1  b2)
		  (set-window-buffer w2 b1)
		  (set-window-start w1 s2)
		  (set-window-start w2 s1)
		  (setq i (1+ i)))))))
   #+END_SRC
** Word wrap
   #+BEGIN_SRC emacs-lisp
     (global-visual-line-mode t)
   #+END_SRC
* These should be at the bottom
  #+BEGIN_SRC emacs-lisp
    (require 'evil-org 'evil)
    (evil-mode t)
    (find-file "~/Dropbox/todo.org")
    ;;(find-file "~/.emacs.d/config.org")
  #+END_SRC
