#+TITLE: Emacs Config
* Load package repos
#+BEGIN_SRC emacs-lisp
  (require 'package)

  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

  (setq package-enable-at-startup nil)
  (package-initialize)
#+END_SRC
* I don't know what this is
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(ansi-color-names-vector
     ["#2b303b" "#bf616a" "#a3be8c" "#ebcb8b" "#8fa1b3" "#b48ead" "#8fa1b3" "#c0c5ce"])
   '(ansi-term-color-vector
     [unspecified "#2b303b" "#bf616a" "#a3be8c" "#ebcb8b" "#8fa1b3" "#b48ead" "#8fa1b3" "#c0c5ce"])
   '(custom-enabled-themes (quote (base16-ocean)))
   '(custom-safe-themes
     (quote
      ("78c1c89192e172436dbf892bd90562bc89e2cc3811b5f9506226e735a953a9c6" default)))
   '(package-selected-packages
     (quote
      (yasnippet rainbow-delimiters org-bullets neotree evil-org evil-leader linum-relative base16-theme magit evil-visual-mark-mode))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+END_SRC
* Automatically install packages
** Assure every package is installed
Assure every package is installed, ask for installation if itâ€™s not.
Return a list of installed packages or nil for every skipped package.
#+BEGIN_SRC emacs-lisp
  (defun ensure-package-installed (&rest packages)
    (mapcar
     (lambda (package)
       (if (package-installed-p package)
           nil
         (if (y-or-n-p (format "Package %s is missing. Install it? " package))
             (package-install package)
           package)))
     packages))
#+END_SRC
** Make sure to have downloaded archive description.
#+BEGIN_SRC emacs-lisp
  (or (file-exists-p package-user-dir)
      (package-refresh-contents))
#+END_SRC
** Activate/Install packages
#+BEGIN_SRC emacs-lisp
  (package-initialize)

  (ensure-package-installed 'evil
			    'auto-complete
			    'base16-theme
			    'evil-leader
			    'evil-org
			    'helm
			    'icicles
			    'linum-relative
			    'magit
			    'neotree
			    'org-bullets
			    'rainbow-delimiters
			    'yasnippet)
#+END_SRC
** Load packages
#+BEGIN_SRC emacs-lisp
  (require 'ox-ioslide)
#+END_SRC
* UI
** Make GUI Emacs less ugly
Remove the bars, change the font, set set cursor colour
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)
  (set-default-font "Source Code Pro 10")
  (set-cursor-color "#c0c5ce")
#+END_SRC
** Make line numbers more readable
Line numbers are difficult to read if text size was adjusted
#+BEGIN_SRC emacs-lisp
  (eval-after-load "linum"
    '(set-face-attribute 'linum nil :height 100))
#+END_SRC
** Remove annoying startup stuffs
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-message t)
#+END_SRC
** Highlight matching pairs of parentheses
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** Start rainbow delimiters automatically
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC
** Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC
** Change all prompts to y or n
=yes/no= to =y/n=
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Org-mode
** Define agenda files
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Dropbox/"))
#+END_SRC
** Open agenda list
#+BEGIN_SRC emacs-lisp
  (defun air-pop-to-org-agenda (split)
    "Visit the org agenda, in the current window or a SPLIT."
    (interactive "P")
    (org-agenda-list)
    (when (not split)
      (delete-other-windows)))

  (define-key global-map (kbd "C-c t a") 'air-pop-to-org-agenda)
#+END_SRC
** Org headlines are indented
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC
** Fontify code in code blocks
Source code blocks *NOW WITH COLOUR!*
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC
** Fix tab key
~tab~ is broken when emacs is running in the CLI
#+BEGIN_SRC emacs-lisp
  ;;(setq evil-want-C-i-jump nil)
#+END_SRC
** Load languages for source code blocks
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((emacs-lisp . t)
                               (python .t)
                               (java .t)
                               (latex .t)))
#+END_SRC
** Save clock history
#+BEGIN_SRC emacs-lisp
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
#+END_SRC
** Create timestamps when a TODO item is done
#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC
** Pretty bullets
#+BEGIN_SRC emacs-lisp
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
* Make more vim-like
** scroll one line at a time
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
#+END_SRC
** Scroll up with C-u
#+BEGIN_SRC emacs-lisp
  (setq evil-want-C-u-scroll t)
#+END_SRC
** Enable leader key
#+BEGIN_SRC emacs-lisp
  (global-evil-leader-mode)
#+END_SRC
** Line numbers
#+BEGIN_SRC emacs-lisp
  ;;(global-linum-mode 1)
  ;;(setq linum-format "%d ")
  ;;(linum-relative-global-mode)
#+END_SRC
** Org-mode agenda movement
*This won't work for some reason* \\
I'll fix it when I care.

use ~j~ and ~k~ keys to move in the agenda
#+BEGIN_SRC emacs-lisp
  ;;(define-key org-agenda-mode-map "j" 'org-agenda-next-item)
  ;;(define-key org-agenda-mode-map "k" 'org-agenda-previous-item)
#+END_SRC
use ~J~ and ~K~ to move between headers
#+BEGIN_SRC emacs-lisp
  (defun air-org-agenda-next-header ()
    "Jump to the next header in an agenda series."
    (interactive)
    (air--org-agenda-goto-header))

  (defun air-org-agenda-previous-header ()
    "Jump to the previous header in an agenda series."
    (interactive)
    (air--org-agenda-goto-header t))

  (defun air--org-agenda-goto-header (&optional backwards)
    "Find the next agenda series header forwards or BACKWARDS."
    (let ((pos (save-excursion
                 (goto-char (if backwards
                                (line-beginning-position)
                              (line-end-position)))
                 (let* ((find-func (if backwards
                                       'previous-single-property-change
                                     'next-single-property-change))
                        (end-func (if backwards
                                      'max
                                    'min))
                        (all-pos-raw (list (funcall find-func (point) 'org-agenda-structural-header)
                                           (funcall find-func (point) 'org-agenda-date-header)))
                        (all-pos (cl-remove-if-not 'numberp all-pos-raw))
                        (prop-pos (if all-pos (apply end-func all-pos) nil)))
                   prop-pos))))
      (if pos (goto-char pos))
      (if backwards (goto-char (line-beginning-position)))))


  ;;(define-key org-agenda-mode-map "J" 'air-org-agenda-next-header)
  ;;(define-key org-agenda-mode-map "K" 'air-org-agenda-previous-header)
#+END_SRC
* Other
** Toggle Neotree
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-n") 'neotree-toggle)
#+END_SRC
** Start evil
#+BEGIN_SRC emacs-lisp
  (require 'evil-org)
  (require 'evil)
  (evil-mode t)
#+END_SRC
** Open file on startup
#+BEGIN_SRC emacs-lisp
  (find-file "/home/jason/Dropbox/todo.org")
#+END_SRC
